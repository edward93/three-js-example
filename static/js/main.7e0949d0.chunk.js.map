{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","animate","requestAnimationFrame","controls","update","renderer","render","scene","camera","initThree","window","THREE","background","innerWidth","innerHeight","position","z","y","OrbitControls","center","set","canvas","setSize","clientWidth","clientHeight","grid","material","opacity","transparent","add","load3dObject","GLTFLoader","load","obj","skull","undefined","error","console","addLight","light","dLight","_this2","react_default","a","createElement","className","ref","React","Component","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRA2FeA,qBAnFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,QAAU,WACRC,sBAAsBR,EAAKO,SAC3BP,EAAKS,SAASC,SACdV,EAAKW,SAASC,OAAOZ,EAAKa,MAAOb,EAAKc,SAfrBd,EAkBnBe,UAAY,WACVC,OAAOC,MAAQA,EAEfjB,EAAKa,MAAQ,IAAII,QACjBjB,EAAKa,MAAMK,WAAa,IAAID,QAAY,WACxCjB,EAAKc,OAAS,IAAIG,oBAAwB,GAAID,OAAOG,WAAaH,OAAOI,YAAa,GAAK,KAE3FpB,EAAKc,OAAOO,SAASC,EAAI,EACzBtB,EAAKc,OAAOO,SAASE,EAAI,EACzBvB,EAAKS,SAAW,IAAIe,IAAcxB,EAAKc,QAEvCd,EAAKS,SAASgB,OAAOC,IAAI,EAAG,EAAG,GAE/B1B,EAAKW,SAAW,IAAIM,gBAAoB,CAAEU,OAAQ3B,EAAK2B,SACvD3B,EAAKW,SAASiB,QAAQ5B,EAAK2B,OAAOE,YAAa7B,EAAK2B,OAAOG,cAE3D,IAAMC,EAAO,IAAId,aAAiB,EAAG,GAAI,OAAQ,WACjDc,EAAKC,SAASC,QAAU,GACxBF,EAAKC,SAASE,aAAc,EAC5BlC,EAAKa,MAAMsB,IAAIJ,GAEf/B,EAAKO,WAvCYP,EA0CnBoC,aAAe,YACE,IAAIC,KACZC,KACL,0BACA,SAAAC,GACEvC,EAAKwC,MAAQD,EAAI1B,MACjBb,EAAKwC,MAAMnB,SAASE,EAAI,EACxBvB,EAAKa,MAAMsB,IAAII,EAAI1B,aAErB4B,EACA,SAAAC,GACEC,QAAQD,MAAMA,MArDD1C,EA0DnB4C,SAAW,WACT,IAAMC,EAAQ,IAAI5B,eAAmB,QAAU,GACzC6B,EAAS,IAAI7B,mBAAuB,SAAU,GACpD6B,EAAOzB,SAASK,IAAI,EAAG,EAAG,GAC1B1B,EAAKa,MAAMsB,IAAIU,GACf7C,EAAKa,MAAMsB,IAAIW,IA7Df9C,EAAK2B,YAASc,EACdzC,EAAKa,WAAQ4B,EACbzC,EAAKc,YAAS2B,EACdzC,EAAKW,cAAW8B,EAChBzC,EAAKS,cAAWgC,EAGhBzC,EAAKwC,WAAQC,EATIzC,mFAmEjBG,KAAKY,YACLZ,KAAKyC,WAELzC,KAAKiC,gDAGE,IAAAW,EAAA5C,KACP,OACE6C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,UAAQE,IAAK,SAAAA,GAAG,OAAKL,EAAKpB,OAASyB,aA9EzBC,IAAMC,YCKJC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAAS/C,OAAOoC,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e0949d0.chunk.js","sourcesContent":["import React from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport \"./app.scss\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = undefined;\n    this.scene = undefined;\n    this.camera = undefined;\n    this.renderer = undefined;\n    this.controls = undefined;\n\n    // Object in scene\n    this.skull = undefined;\n  }\n\n  animate = () => {\n    requestAnimationFrame(this.animate);\n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  initThree = () => {\n    window.THREE = THREE;\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(\"#d8d8d8\");\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    // Change camera position\n    this.camera.position.z = 3;\n    this.camera.position.y = 1;\n    this.controls = new OrbitControls(this.camera);\n\n    this.controls.center.set(0, 1, 0);\n\n    this.renderer = new THREE.WebGLRenderer({ canvas: this.canvas });\n    this.renderer.setSize(this.canvas.clientWidth, this.canvas.clientHeight);\n\n    const grid = new THREE.GridHelper(5, 10, \"#000\", \"#9b9b9b\");\n    grid.material.opacity = 0.4;\n    grid.material.transparent = true;\n    this.scene.add(grid);\n\n    this.animate();\n  };\n\n  load3dObject = () => {\n    const loader = new GLTFLoader();\n    loader.load(\n      \"models/skull/scene.gltf\",\n      obj => {\n        this.skull = obj.scene;\n        this.skull.position.y = 1;\n        this.scene.add(obj.scene);\n      },\n      undefined,\n      error => {\n        console.error(error);\n      }\n    );\n  };\n\n  addLight = () => {\n    const light = new THREE.AmbientLight(0x404040, 3);\n    const dLight = new THREE.DirectionalLight(0xffffff, 3);\n    dLight.position.set(1, 1, 1);\n    this.scene.add(light);\n    this.scene.add(dLight);\n  };\n\n  componentDidMount() {\n    this.initThree();\n    this.addLight();\n\n    this.load3dObject();\n  }\n\n  render() {\n    return (\n      <div className=\"display-container\">\n        <div className=\"layout\" />\n        <canvas ref={ref => (this.canvas = ref)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}